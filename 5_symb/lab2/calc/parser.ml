type token =
  | EOF
  | DEF
  | LET
  | LPAREN
  | RPAREN
  | COMMA
  | EQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | FLOAT of (float)
  | ID of (string)

open Parsing;;
# 2 "parser.mly"
  open Ast
# 20 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* DEF *);
  258 (* LET *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* COMMA *);
  262 (* EQ *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
    0|]

let yytransl_block = [|
  267 (* FLOAT *);
  268 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\001\000\004\000\007\000\000\000\001\000\001\000\003\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\002\000\004\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\021\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\018\000\000\000\000\000\013\000\014\000\000\000\000\000\005\000\
\000\000\000\000\016\000\000\000\000\000\020\000\007\000\000\000\
\000\000"

let yydgoto = "\002\000\
\009\000\031\000\032\000\023\000\024\000\025\000"

let yysindex = "\002\000\
\020\255\000\000\250\254\253\254\255\254\255\254\000\000\009\255\
\000\000\017\255\011\255\013\255\026\255\000\000\255\254\255\254\
\255\254\255\254\255\254\025\255\255\254\000\000\033\255\042\255\
\000\000\035\255\035\255\000\000\000\000\024\255\043\255\000\000\
\017\255\255\254\000\000\025\255\044\255\000\000\000\000\255\254\
\017\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\048\000\000\000\000\000\000\000\000\000\045\255\000\000\
\000\000\000\000\000\000\047\255\000\000\000\000\048\255\000\000\
\000\000\008\000\013\000\000\000\000\000\049\255\000\000\000\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000"

let yygindex = "\000\000\
\000\000\000\000\020\000\255\255\000\000\023\000"

let yytablesize = 277
let yytable = "\010\000\
\009\000\005\000\001\000\013\000\014\000\011\000\006\000\011\000\
\012\000\007\000\008\000\015\000\012\000\020\000\026\000\027\000\
\028\000\029\000\021\000\033\000\003\000\004\000\005\000\016\000\
\017\000\018\000\019\000\006\000\036\000\022\000\007\000\008\000\
\016\000\017\000\018\000\019\000\030\000\034\000\041\000\016\000\
\017\000\018\000\019\000\018\000\019\000\035\000\037\000\001\000\
\017\000\040\000\004\000\019\000\006\000\002\000\003\000\039\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\009\000\000\000\009\000\
\009\000\009\000\009\000\011\000\011\000\000\000\011\000\011\000\
\012\000\012\000\000\000\012\000\012\000"

let yycheck = "\001\000\
\000\000\003\001\001\000\005\000\006\000\012\001\008\001\000\000\
\012\001\011\001\012\001\003\001\000\000\003\001\016\000\017\000\
\018\000\019\000\006\001\021\000\001\001\002\001\003\001\007\001\
\008\001\009\001\010\001\008\001\005\001\004\001\011\001\012\001\
\007\001\008\001\009\001\010\001\012\001\005\001\040\000\007\001\
\008\001\009\001\010\001\009\001\010\001\004\001\004\001\000\000\
\004\001\006\001\004\001\004\001\004\001\000\000\000\000\036\000\
\034\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\004\001\005\001\255\255\007\001\008\001\
\004\001\005\001\255\255\007\001\008\001"

let yynames_const = "\
  EOF\000\
  DEF\000\
  LET\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  "

let yynames_block = "\
  FLOAT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 22 "parser.mly"
         ( Eval _1 )
# 181 "parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 23 "parser.mly"
                   ( Let (_2, _4) )
# 189 "parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 24 "parser.mly"
                                           ( Def (_2, _4, _7) )
# 198 "parser.ml"
               : stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
    ( [] )
# 204 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 28 "parser.mly"
                      ( _1 )
# 211 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
       ( [_1] )
# 218 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 32 "parser.mly"
                               ( _1::_3 )
# 226 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 35 "parser.mly"
          ( Const _1 )
# 233 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 36 "parser.mly"
       ( Var _1 )
# 240 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : expr) in
    Obj.repr(
# 37 "parser.mly"
                       ( _2 )
# 247 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 38 "parser.mly"
                   ( Add (_1, _3) )
# 255 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 39 "parser.mly"
                    ( Sub (_1, _3) )
# 263 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 40 "parser.mly"
                    ( Mult (_1, _3) )
# 271 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 41 "parser.mly"
                  ( Div (_1, _3) )
# 279 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 42 "parser.mly"
                            ( Minus _2 )
# 286 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : expr list) in
    Obj.repr(
# 43 "parser.mly"
                             ( Call (_1, _3) )
# 294 "parser.ml"
               : expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
    ( [] )
# 300 "parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr list) in
    Obj.repr(
# 47 "parser.mly"
                    ( _1 )
# 307 "parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : expr) in
    Obj.repr(
# 50 "parser.mly"
         ( [_1] )
# 314 "parser.ml"
               : expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : expr list) in
    Obj.repr(
# 51 "parser.mly"
                               ( _1::_3 )
# 322 "parser.ml"
               : expr list))
(* Entry stmt *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let stmt (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : stmt)
