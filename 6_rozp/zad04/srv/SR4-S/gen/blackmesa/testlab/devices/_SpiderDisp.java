// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_SpiderDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package blackmesa.testlab.devices;

public abstract class _SpiderDisp extends Ice.ObjectImpl implements Spider
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::blackmesa::testlab::devices::AnimalLike",
        "::blackmesa::testlab::devices::Device",
        "::blackmesa::testlab::devices::Spider"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[3];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[3];
    }

    public static String
    ice_staticId()
    {
        return __ids[3];
    }

    public final void
    growl(String password, int type)
        throws WrongPasswordException
    {
        growl(password, type, null);
    }

    public final String
    getID()
    {
        return getID(null);
    }

    public final Lambda[]
    getMethods()
    {
        return getMethods(null);
    }

    public final void
    leaveAndFree(String password)
        throws WrongPasswordException
    {
        leaveAndFree(password, null);
    }

    public final void
    startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener)
        throws WrongPasswordException
    {
        startObserving(password, listener, null);
    }

    public final void
    stopObserving(String password)
        throws WrongPasswordException
    {
        stopObserving(password, null);
    }

    public final void
    takeAndUse(String password)
        throws AlreadyUsedException,
               WrongPasswordException
    {
        takeAndUse(password, null);
    }

    public final void
    move(String password, float direction, float speed, int movementType)
        throws WrongPasswordException
    {
        move(password, direction, speed, movementType, null);
    }

    public static Ice.DispatchStatus
    ___move(Spider __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String password;
        password = __is.readString();
        float direction;
        direction = __is.readFloat();
        float speed;
        speed = __is.readFloat();
        int movementType;
        movementType = __is.readInt();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.move(password, direction, speed, movementType, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(WrongPasswordException ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "getID",
        "getMethods",
        "growl",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "leaveAndFree",
        "move",
        "startObserving",
        "stopObserving",
        "takeAndUse"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _DeviceDisp.___getID(this, in, __current);
            }
            case 1:
            {
                return _DeviceDisp.___getMethods(this, in, __current);
            }
            case 2:
            {
                return _AnimalLikeDisp.___growl(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return _DeviceDisp.___leaveAndFree(this, in, __current);
            }
            case 8:
            {
                return ___move(this, in, __current);
            }
            case 9:
            {
                return _DeviceDisp.___startObserving(this, in, __current);
            }
            case 10:
            {
                return _DeviceDisp.___stopObserving(this, in, __current);
            }
            case 11:
            {
                return _DeviceDisp.___takeAndUse(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type blackmesa::testlab::devices::Spider was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type blackmesa::testlab::devices::Spider was not generated with stream support";
        throw ex;
    }
}
