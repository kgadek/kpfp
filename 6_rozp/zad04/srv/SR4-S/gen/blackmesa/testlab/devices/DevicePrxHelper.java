// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DevicePrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package blackmesa.testlab.devices;

public final class DevicePrxHelper extends Ice.ObjectPrxHelperBase implements DevicePrx
{
    public String
    getID()
    {
        return getID(null, false);
    }

    public String
    getID(java.util.Map<String, String> __ctx)
    {
        return getID(__ctx, true);
    }

    private String
    getID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getID");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                return __del.getID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getID_name = "getID";

    public Ice.AsyncResult begin_getID()
    {
        return begin_getID(null, false, null);
    }

    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx)
    {
        return begin_getID(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getID(Ice.Callback __cb)
    {
        return begin_getID(null, false, __cb);
    }

    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getID(Callback_Device_getID __cb)
    {
        return begin_getID(null, false, __cb);
    }

    public Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, Callback_Device_getID __cb)
    {
        return begin_getID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getID_name, __cb);
        try
        {
            __result.__prepare(__getID_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public Lambda[]
    getMethods()
    {
        return getMethods(null, false);
    }

    public Lambda[]
    getMethods(java.util.Map<String, String> __ctx)
    {
        return getMethods(__ctx, true);
    }

    private Lambda[]
    getMethods(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getMethods");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                return __del.getMethods(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getMethods_name = "getMethods";

    public Ice.AsyncResult begin_getMethods()
    {
        return begin_getMethods(null, false, null);
    }

    public Ice.AsyncResult begin_getMethods(java.util.Map<String, String> __ctx)
    {
        return begin_getMethods(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getMethods(Ice.Callback __cb)
    {
        return begin_getMethods(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMethods(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMethods(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMethods(Callback_Device_getMethods __cb)
    {
        return begin_getMethods(null, false, __cb);
    }

    public Ice.AsyncResult begin_getMethods(java.util.Map<String, String> __ctx, Callback_Device_getMethods __cb)
    {
        return begin_getMethods(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMethods(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMethods_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMethods_name, __cb);
        try
        {
            __result.__prepare(__getMethods_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Lambda[] end_getMethods(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMethods_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        Lambda[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = LambdasHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public void
    leaveAndFree(String password)
        throws WrongPasswordException
    {
        leaveAndFree(password, null, false);
    }

    public void
    leaveAndFree(String password, java.util.Map<String, String> __ctx)
        throws WrongPasswordException
    {
        leaveAndFree(password, __ctx, true);
    }

    private void
    leaveAndFree(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws WrongPasswordException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("leaveAndFree");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.leaveAndFree(password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __leaveAndFree_name = "leaveAndFree";

    public Ice.AsyncResult begin_leaveAndFree(String password)
    {
        return begin_leaveAndFree(password, null, false, null);
    }

    public Ice.AsyncResult begin_leaveAndFree(String password, java.util.Map<String, String> __ctx)
    {
        return begin_leaveAndFree(password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_leaveAndFree(String password, Ice.Callback __cb)
    {
        return begin_leaveAndFree(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_leaveAndFree(String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_leaveAndFree(password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_leaveAndFree(String password, Callback_Device_leaveAndFree __cb)
    {
        return begin_leaveAndFree(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_leaveAndFree(String password, java.util.Map<String, String> __ctx, Callback_Device_leaveAndFree __cb)
    {
        return begin_leaveAndFree(password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_leaveAndFree(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__leaveAndFree_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __leaveAndFree_name, __cb);
        try
        {
            __result.__prepare(__leaveAndFree_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_leaveAndFree(Ice.AsyncResult __result)
        throws WrongPasswordException
    {
        Ice.AsyncResult.__check(__result, this, __leaveAndFree_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(WrongPasswordException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener)
        throws WrongPasswordException
    {
        startObserving(password, listener, null, false);
    }

    public void
    startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx)
        throws WrongPasswordException
    {
        startObserving(password, listener, __ctx, true);
    }

    private void
    startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws WrongPasswordException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startObserving");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.startObserving(password, listener, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __startObserving_name = "startObserving";

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener)
    {
        return begin_startObserving(password, listener, null, false, null);
    }

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx)
    {
        return begin_startObserving(password, listener, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, Ice.Callback __cb)
    {
        return begin_startObserving(password, listener, null, false, __cb);
    }

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startObserving(password, listener, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, Callback_Device_startObserving __cb)
    {
        return begin_startObserving(password, listener, null, false, __cb);
    }

    public Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx, Callback_Device_startObserving __cb)
    {
        return begin_startObserving(password, listener, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startObserving(String password, blackmesa.testlab.scientist.PushFetcherPrx listener, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startObserving_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startObserving_name, __cb);
        try
        {
            __result.__prepare(__startObserving_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(password);
            blackmesa.testlab.scientist.PushFetcherPrxHelper.__write(__os, listener);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_startObserving(Ice.AsyncResult __result)
        throws WrongPasswordException
    {
        Ice.AsyncResult.__check(__result, this, __startObserving_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(WrongPasswordException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    stopObserving(String password)
        throws WrongPasswordException
    {
        stopObserving(password, null, false);
    }

    public void
    stopObserving(String password, java.util.Map<String, String> __ctx)
        throws WrongPasswordException
    {
        stopObserving(password, __ctx, true);
    }

    private void
    stopObserving(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws WrongPasswordException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopObserving");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.stopObserving(password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopObserving_name = "stopObserving";

    public Ice.AsyncResult begin_stopObserving(String password)
    {
        return begin_stopObserving(password, null, false, null);
    }

    public Ice.AsyncResult begin_stopObserving(String password, java.util.Map<String, String> __ctx)
    {
        return begin_stopObserving(password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopObserving(String password, Ice.Callback __cb)
    {
        return begin_stopObserving(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopObserving(String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopObserving(password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopObserving(String password, Callback_Device_stopObserving __cb)
    {
        return begin_stopObserving(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopObserving(String password, java.util.Map<String, String> __ctx, Callback_Device_stopObserving __cb)
    {
        return begin_stopObserving(password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopObserving(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopObserving_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopObserving_name, __cb);
        try
        {
            __result.__prepare(__stopObserving_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stopObserving(Ice.AsyncResult __result)
        throws WrongPasswordException
    {
        Ice.AsyncResult.__check(__result, this, __stopObserving_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(WrongPasswordException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    takeAndUse(String password)
        throws AlreadyUsedException,
               WrongPasswordException
    {
        takeAndUse(password, null, false);
    }

    public void
    takeAndUse(String password, java.util.Map<String, String> __ctx)
        throws AlreadyUsedException,
               WrongPasswordException
    {
        takeAndUse(password, __ctx, true);
    }

    private void
    takeAndUse(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AlreadyUsedException,
               WrongPasswordException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("takeAndUse");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.takeAndUse(password, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __takeAndUse_name = "takeAndUse";

    public Ice.AsyncResult begin_takeAndUse(String password)
    {
        return begin_takeAndUse(password, null, false, null);
    }

    public Ice.AsyncResult begin_takeAndUse(String password, java.util.Map<String, String> __ctx)
    {
        return begin_takeAndUse(password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_takeAndUse(String password, Ice.Callback __cb)
    {
        return begin_takeAndUse(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_takeAndUse(String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_takeAndUse(password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_takeAndUse(String password, Callback_Device_takeAndUse __cb)
    {
        return begin_takeAndUse(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_takeAndUse(String password, java.util.Map<String, String> __ctx, Callback_Device_takeAndUse __cb)
    {
        return begin_takeAndUse(password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_takeAndUse(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__takeAndUse_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __takeAndUse_name, __cb);
        try
        {
            __result.__prepare(__takeAndUse_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_takeAndUse(Ice.AsyncResult __result)
        throws AlreadyUsedException,
               WrongPasswordException
    {
        Ice.AsyncResult.__check(__result, this, __takeAndUse_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(AlreadyUsedException __ex)
            {
                throw __ex;
            }
            catch(WrongPasswordException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevicePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                DevicePrxHelper __h = new DevicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DevicePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DevicePrxHelper __h = new DevicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::blackmesa::testlab::devices::Device"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _DeviceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _DeviceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, DevicePrx v)
    {
        __os.writeProxy(v);
    }

    public static DevicePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DevicePrxHelper result = new DevicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
